//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calc_Parse.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace parserctx {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Calc_ParseLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PARENTHESIS=1, RIGHT_PARENTHESIS=2, CARET=3, STAR=4, SLASH=5, PLUS=6, 
		MINUS=7, SEMICOLON=8, NUMBER=9, WHITESPACE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "CARET", "STAR", "SLASH", "PLUS", 
		"MINUS", "SEMICOLON", "NUMBER", "WHITESPACE"
	};


	public Calc_ParseLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Calc_ParseLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'", "'*'", "'/'", "'+'", "'-'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "CARET", "STAR", "SLASH", 
		"PLUS", "MINUS", "SEMICOLON", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calc_Parse.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Calc_ParseLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,49,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,4,8,39,8,8,11,8,12,8,40,1,9,4,9,44,8,9,11,9,12,9,
		45,1,9,1,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,2,
		1,0,48,57,3,0,9,10,13,13,32,32,50,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,23,1,0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,
		9,29,1,0,0,0,11,31,1,0,0,0,13,33,1,0,0,0,15,35,1,0,0,0,17,38,1,0,0,0,19,
		43,1,0,0,0,21,22,5,40,0,0,22,2,1,0,0,0,23,24,5,41,0,0,24,4,1,0,0,0,25,
		26,5,94,0,0,26,6,1,0,0,0,27,28,5,42,0,0,28,8,1,0,0,0,29,30,5,47,0,0,30,
		10,1,0,0,0,31,32,5,43,0,0,32,12,1,0,0,0,33,34,5,45,0,0,34,14,1,0,0,0,35,
		36,5,59,0,0,36,16,1,0,0,0,37,39,7,0,0,0,38,37,1,0,0,0,39,40,1,0,0,0,40,
		38,1,0,0,0,40,41,1,0,0,0,41,18,1,0,0,0,42,44,7,1,0,0,43,42,1,0,0,0,44,
		45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,6,9,0,0,48,
		20,1,0,0,0,3,0,40,45,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace parserctx
